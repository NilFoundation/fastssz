// Code generated by fastssz. DO NOT EDIT.
// Hash: 279ec70eb687a0d8b56126a61c51b8f239f2cd00422ae048f8c0977d2fc1febc
// Version: 0.1.3
package testcases

import (
	ssz "github.com/NilFoundation/fastssz"
)

// MarshalSSZ ssz marshals the Wrapper object
func (w *Wrapper) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(w)
}

// MarshalSSZTo ssz marshals the Wrapper object to a target array
func (w *Wrapper) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Value'
	dst = ssz.MarshalUint64(dst, w.Value)

	return
}

// UnmarshalSSZ ssz unmarshals the Wrapper object
func (w *Wrapper) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 8 {
		return ssz.ErrSize
	}

	// Field (0) 'Value'
	w.Value = ssz.UnmarshallUint64(buf[0:8])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Wrapper object
func (w *Wrapper) SizeSSZ() (size int) {
	size = 8
	return
}

// HashTreeRoot ssz hashes the Wrapper object
func (w *Wrapper) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(w)
}

// HashTreeRootWith ssz hashes the Wrapper object with a hasher
func (w *Wrapper) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Value'
	hh.PutUint64(w.Value)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Wrapper object
func (w *Wrapper) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(w)
}

// MarshalSSZ ssz marshals the Test1 object
func (t *Test1) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the Test1 object to a target array
func (t *Test1) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'G'
	if dst, err = t.G.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Test1 object
func (t *Test1) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 8 {
		return ssz.ErrSize
	}

	// Field (0) 'G'
	if err = t.G.UnmarshalSSZ(buf[0:8]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Test1 object
func (t *Test1) SizeSSZ() (size int) {
	size = 8
	return
}

// HashTreeRoot ssz hashes the Test1 object
func (t *Test1) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the Test1 object with a hasher
func (t *Test1) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'G'
	if err = t.G.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Test1 object
func (t *Test1) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(t)
}

// MarshalSSZ ssz marshals the Wrapper2 object
func (w *Wrapper2) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(w)
}

// MarshalSSZTo ssz marshals the Wrapper2 object to a target array
func (w *Wrapper2) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Value1'
	dst = ssz.MarshalUint64(dst, w.Value1)

	// Field (1) 'Value2'
	dst = ssz.MarshalUint16(dst, w.Value2)

	return
}

// UnmarshalSSZ ssz unmarshals the Wrapper2 object
func (w *Wrapper2) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 10 {
		return ssz.ErrSize
	}

	// Field (0) 'Value1'
	w.Value1 = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Value2'
	w.Value2 = ssz.UnmarshallUint16(buf[8:10])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Wrapper2 object
func (w *Wrapper2) SizeSSZ() (size int) {
	size = 10
	return
}

// HashTreeRoot ssz hashes the Wrapper2 object
func (w *Wrapper2) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(w)
}

// HashTreeRootWith ssz hashes the Wrapper2 object with a hasher
func (w *Wrapper2) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Value1'
	hh.PutUint64(w.Value1)

	// Field (1) 'Value2'
	hh.PutUint16(w.Value2)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Wrapper2 object
func (w *Wrapper2) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(w)
}

// MarshalSSZ ssz marshals the Test2 object
func (t *Test2) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the Test2 object to a target array
func (t *Test2) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'G'
	if dst, err = t.G.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Test2 object
func (t *Test2) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 10 {
		return ssz.ErrSize
	}

	// Field (0) 'G'
	if err = t.G.UnmarshalSSZ(buf[0:10]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Test2 object
func (t *Test2) SizeSSZ() (size int) {
	size = 10
	return
}

// HashTreeRoot ssz hashes the Test2 object
func (t *Test2) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the Test2 object with a hasher
func (t *Test2) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'G'
	if err = t.G.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Test2 object
func (t *Test2) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(t)
}
