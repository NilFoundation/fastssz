// Code generated by fastssz. DO NOT EDIT.
// Hash: 1a6916921f11e683f5041a336b41cee4d7284958ad85a390ce8485efec82e11c
// Version: 0.1.3
package testcases

import (
	ssz "github.com/NilFoundation/fastssz"
)

// MarshalSSZ ssz marshals the Issue136 object
func (i *Issue136) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue136 object to a target array
func (i *Issue136) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'C'
	if dst, err = i.C.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Issue136 object
func (i *Issue136) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	// Field (0) 'C'
	if err = i.C.UnmarshalSSZ(buf[0:0]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue136 object
func (i *Issue136) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the Issue136 object
func (i *Issue136) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue136 object with a hasher
func (i *Issue136) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'C'
	if err = i.C.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue136 object
func (i *Issue136) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
